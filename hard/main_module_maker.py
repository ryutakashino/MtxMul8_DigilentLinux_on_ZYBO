n = int(input())

import math
# 内積結果をoutput_moduleへ格納する際のアドレスサイズselect_sizeを求める．
# このセレクタは0からn^2-1の合計n^2個を区別する．n^2-1を表現可能なビットサイズを求める
select_size = math.ceil( math.log2(n**2) )

# input_moduleから内積計算のための要素を取得する際のアドレスサイズnselect_sizeを求める．
# このセレクタは0からn-1の合計n個を区別する．n-1を表現可能なビットサイズを求める
nselect_size = math.ceil( math.log2(n) )

# 2つの行列要素と計算開始命令のためのアドレスサイズreg_addr_sizeを求める．
# このセレクタは0から2(n^2)の合計2(n^2)+1個を区別する．2(n^2)を表現可能なビットサイズを求める
reg_addr_size = math.ceil( math.log2(2*n**2 + 1) )    
# この値は4Bの入力データの識別アドレス.ARMからは1Bに1アドレスで送られる．そのため下位2bitを加える。
reg_addr_size +=2;

print("`timescale 1 ns / 1 ps")
print("")
print("module MODULE_AXILite_v1_0 #(")
print("    // Parameters of Axi Slave Bus Interface S00_AXI")
print("    parameter integer C_S00_AXI_DATA_WIDTH    = 32,")
print("    parameter integer C_S00_AXI_ADDR_WIDTH    =",reg_addr_size," ")
print(")(")
print("")
print("")
print("    // Ports of Axi Slave Bus Interface S00_AXI")
print("    input wire  s00_axi_aclk,")
print("    input wire  s00_axi_aresetn,")
print("    input wire [C_S00_AXI_ADDR_WIDTH-1:0] s00_axi_awaddr,")
print("    input wire [2:0] s00_axi_awprot,")
print("    input wire  s00_axi_awvalid,")
print("    output wire  s00_axi_awready,")
print("    input wire [C_S00_AXI_DATA_WIDTH-1:0] s00_axi_wdata,")
print("    input wire [(C_S00_AXI_DATA_WIDTH/8)-1:0] s00_axi_wstrb,")
print("    input wire  s00_axi_wvalid,")
print("    output wire  s00_axi_wready,")
print("    output wire [1:0] s00_axi_bresp,")
print("    output wire  s00_axi_bvalid,")
print("    input wire  s00_axi_bready,")
print("    input wire [C_S00_AXI_ADDR_WIDTH-1:0] s00_axi_araddr,")
print("    input wire [2:0] s00_axi_arprot,")
print("    input wire  s00_axi_arvalid,")
print("    output wire  s00_axi_arready,")
print("    output wire [C_S00_AXI_DATA_WIDTH-1:0] s00_axi_rdata,")
print("    output wire [1:0] s00_axi_rresp,")
print("    output wire  s00_axi_rvalid,")
print("    input wire  s00_axi_rready,")
print("")
print("    // Users to add ports here")
print("    output wire [1:0] led,")
print("    output wire [63:0] cycle,")
print("    output wire overflow")
print(");")
print("        ")
print("	//INPUT_MODULE instance signals")
print("    wire  c_start;")
print("    wire [",nselect_size-1,":0] a_select;",sep='')
print("    wire [",nselect_size-1,":0] b_select;",sep='')
print("    ")

for i in range(n):
    print("    wire [C_S00_AXI_DATA_WIDTH-1:0] reg_data_a",i,";",sep='')

print("    ")
for i in range(n):
    print("    wire [C_S00_AXI_DATA_WIDTH-1:0] reg_data_b",i,";",sep='')
print("    ") 

print("    INPUT_MODULE #(")
print("         .C_S_AXI_DATA_WIDTH( C_S00_AXI_DATA_WIDTH )")
print("        ,.C_S_AXI_ADDR_WIDTH( C_S00_AXI_ADDR_WIDTH )")
print("    ) in_unit (")
print("         .C_START( c_start )")
print("        ,.A_SELECT( a_select )")
print("        ,.B_SELECT( b_select )")
print("    ")
for i in range(n):
    print("        ,.REG_DATA_A",i,"( reg_data_a",i," )",sep='')

print("    ")
for i in range(n):
    print("        ,.REG_DATA_B",i,"( reg_data_b",i," )",sep='')
print("    ")    
print("        ,.S_AXI_ACLK( s00_axi_aclk )")
print("        ,.S_AXI_ARESETN( s00_axi_aresetn )")
print("        ,.S_AXI_AWADDR( s00_axi_awaddr )")
print("        ,.S_AXI_AWPROT( s00_axi_awprot )")
print("        ,.S_AXI_AWVALID( s00_axi_awvalid )")
print("        ,.S_AXI_AWREADY( s00_axi_awready )")
print("        ,.S_AXI_WDATA( s00_axi_wdata )")
print("        ,.S_AXI_WSTRB( s00_axi_wstrb )")
print("        ,.S_AXI_WVALID( s00_axi_wvalid )")
print("        ,.S_AXI_WREADY( s00_axi_wready )")
print("        ,.S_AXI_BRESP( s00_axi_bresp )")
print("        ,.S_AXI_BVALID( s00_axi_bvalid )")
print("        ,.S_AXI_BREADY( s00_axi_bready )")
print("    );")
print("    ")
print("    ")
print("    ")
print("    //Ctrl")
print("    wire [",select_size-1,":0] select;",sep='')
print("    wire end_signal;",sep='')
print("    CTRL_MODULE ctrl_unit (")
print("         .ACLK( s00_axi_aclk )")
print("        ,.ARESETN( s00_axi_aresetn )")
print("        ,.C_START( c_start )")
print("        ,.A_SELECT( a_select )")
print("        ,.B_SELECT( b_select )")
print("        ,.SELECT( select )")
print("        ,.END_SIGNAL( end_signal )")
print("    );")
print("    //DOTPRODUCT")
print("    wire [C_S00_AXI_DATA_WIDTH-1:0] dot_product;")
print("    wire [",select_size-1,":0] dest_o;",sep='')
print("    DOTPRODUCT_MODULE product_unit (")
print("         .ACLK( s00_axi_aclk )")
print("        ,.ARESETN( s00_axi_aresetn )")
print("        ,.DEST_I( select )")

print("    ")
for i in range(n):
    print("        ,.A_ELEM",i,"( reg_data_a",i," )",sep='')

print("    ")
for i in range(n):
    print("        ,.B_ELEM",i,"( reg_data_b",i," )",sep='')
print("    ")    

print("        ,.DOT_PRODUCT( dot_product )")
print("        ,.DEST_O( dest_o )")
print("    );")
print("    //OUTPUT")
print("    OUTPUT_MODULE #(")
print("         .C_S_AXI_DATA_WIDTH( C_S00_AXI_DATA_WIDTH )")
print("        ,.C_S_AXI_ADDR_WIDTH( C_S00_AXI_ADDR_WIDTH )")
print("    ) out_unit (")
print("         .C_START( c_start )")
print("        ,.SELECT( dest_o )")
print("        ,.DOT_PRODUCT( dot_product )")
print("        ,.STATUS( led )")
print("        ,.END_SIGNAL( end_signal )")
print("        ,.S_AXI_ACLK( s00_axi_aclk )")
print("        ,.S_AXI_ARESETN( s00_axi_aresetn )")
print("        ,.S_AXI_ARADDR( s00_axi_araddr )")
print("        ,.S_AXI_ARPROT( s00_axi_arprot )")
print("        ,.S_AXI_ARVALID( s00_axi_arvalid )")
print("        ,.S_AXI_ARREADY( s00_axi_arready )")
print("        ,.S_AXI_RDATA( s00_axi_rdata )")
print("        ,.S_AXI_RRESP( s00_axi_rresp )")
print("        ,.S_AXI_RVALID( s00_axi_rvalid )")
print("        ,.S_AXI_RREADY( s00_axi_rready )")
print("    );")
print("    ")
print("    ")
print("    COUNTER #(")
print("         .CNT_WIDTH( 64 )")
print("    ) CYCLE_COUNTER (")
print("         .CLK( s00_axi_aclk )")
print("        ,.RST( s00_axi_aresetn )")
print("        ,.COUNT_RST( c_start )")
print("        ,.CE( 1'b1 )")
print("        ,.C_IN( 1'b1 )")
print("        ,.C_OUT( overflow )")
print("        ,.Q( cycle )")
print("    );    ")
print("endmodule")
