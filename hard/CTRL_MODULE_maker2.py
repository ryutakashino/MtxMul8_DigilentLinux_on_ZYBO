n = int(input())

import math

# 内積結果をoutput_moduleへ格納する際のアドレスサイズselect_sizeを求める．
# このセレクタは0からn^2-1の合計n^2個を区別する．n^2-1を表現可能なビットサイズを求める
select_size = math.ceil( math.log2(n**2) )


# input_moduleから内積計算のための要素を取得する際のアドレスサイズnselect_sizeを求める．
# このセレクタは0からn-1の合計n個を区別する．n-1を表現可能なビットサイズを求める
nselect_size = math.ceil( math.log2(n) )

 
    
print("module CTRL_MODULE(")
print("    input ACLK, ")
print("    input ARESETN,")
print("    input C_START,")
print("    output wire [",nselect_size - 1,":0] A_SELECT,",sep='')
print("    output wire [",nselect_size - 1,":0] B_SELECT,",sep='')
print("    output wire [",select_size - 1,":0] SELECT,",sep='')
print("    output END_SIGNAL")
print("    );")
print("    localparam CNT_WIDTH = ",nselect_size,";",sep='')
print("    wire [CNT_WIDTH-1:0] lower_digit, upper_digit;")
print("    wire [",select_size - 1,":0]select = (upper_digit << CNT_WIDTH) + lower_digit;",sep='')
print("    reg  ce, cnt_rst; ")
print("    wire c_out;")
print("")
print("    assign A_SELECT = upper_digit;")
print("    assign B_SELECT = lower_digit;")
print("    assign SELECT = select;")
print("    ")
print("    ")
print("    COUNTER #(")
print("         .CNT_WIDTH( CNT_WIDTH )")
print("    ) LOWER_COUNTER (")
print("         .CLK( ACLK )")
print("        ,.RST( ARESETN )")
print("        ,.COUNT_RST(cnt_rst)")
print("        ,.CE( ce )")
print("        ,.C_IN( 1'b1 )")
print("        ,.C_OUT( c_out )")
print("        ,.Q( lower_digit )")
print("    );")
print("    ")
print("    COUNTER #(")
print("         .CNT_WIDTH( CNT_WIDTH )")
print("    ) UPPER_COUNTER (")
print("         .CLK( ACLK )")
print("        ,.RST( ARESETN )")
print("        ,.COUNT_RST(cnt_rst)")
print("        ,.CE( ce )")
print("        ,.C_IN( c_out )")
print("        ,.C_OUT( END_SIGNAL )")
print("        ,.Q( upper_digit )")
print("    );")
print("        ")
print("    reg [1:0] state;")
print("    `define P0 2'b00 //IDLE")
print("    `define P1 2'b01 //CALC")
print("    ")
print("    always @(posedge ACLK) begin: state_machine")
print("        if (ARESETN == 1'b0) begin")
print("            state <= `P0;")
print("            ce <= 0;")
print("            cnt_rst <= 0;")
print("        end else begin    ")
print("            case (state)")
print("                `P0: begin")
print("                    if (C_START) begin")
print("                        ce <= 1'b1;")
print("                        cnt_rst <= 1'b0;")
print("                        state <= `P1;")
print("                    end else begin")
print("                        state <= `P0;")
print("                    end")
print("                end")
print("                `P1: begin")
print("                    if (select == ",select_size,"'d",n**2-1,") begin",sep='')
print("                        ce <= 1'b0;")
print("                        cnt_rst <= 1'b1;")
print("                        state <= `P0;                    ")
print("                    end else begin")
print("                        state <= `P1;")
print("                    end")
print("                end")
print("                default: state <= `P0;  ")
print("            endcase")
print("        end//end if")
print("    end//:state_machine")
print("endmodule      ")
